@page "/vendas"
@using System.Globalization
@using curitibano.blazor.junino.Service
@inject ItemService ItemService
@inject NavigationManager NavigationManager

<h2 class="mb-4">Registrar Venda</h2>

@if (itensVenda == null)
{
    <p>A carregar itens...</p>
}
else if (itensVenda.Count == 0)
{
    <p class="text-danger">Nenhum item disponível em estoque.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Item</th>
                <th>Estoque</th>
                <th>Valor</th>
                <th>Quantidade a vender</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itensVenda)
            {
                <tr>
                    <td>@item.Descricao</td>
                    <td>@item.Quantidade</td>
                    <td>@item.Valor.ToString("C", CultureInfo.CreateSpecificCulture("pt-BR"))</td>
                    <td>
                        <input type="number" class="form-control" min="0" max="@item.Quantidade" @bind="item.QuantidadeVenda" @oninput="CalcularTroco" />
                    </td>
                    <td>@((item.QuantidadeVenda * item.Valor).ToString("C", CultureInfo.CreateSpecificCulture("pt-BR")))</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row g-3 align-items-end mb-3">
        <div class="col-md-6">
            <label>Forma de Pagamento:</label>
            <select class="form-select" @bind="PagamentoId">
                <option value="1">Dinheiro</option>
                <option value="2">Pix</option>
                <option value="3">Débito</option>
                <option value="4">Crédito</option>
            </select>
        </div>

        <div class="col-md-6">
            <label>Valor Recebido:</label>
            <input type="number" step="0.01" class="form-control" @bind="ValorRecebido" @onblur="CalcularTroco" />
        </div>
    </div>

    <div class="row g-3 align-items-center">
        <div class="col-md-4">
            <label>Troco:</label>
            <p class="form-control-plaintext text-success fs-5">@Troco.ToString("C", CultureInfo.CreateSpecificCulture("pt-BR"))</p>
        </div>
        <div class="col-md-4">
            <label>Total a pagar:</label>
            <p class="form-control-plaintext text-success fs-5">@TotalVenda.ToString("C", CultureInfo.CreateSpecificCulture("pt-BR"))</p>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="ConfirmarVenda">Confirmar Venda</button>
        </div>
    </div>
}

@if (MostrarModal)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Venda Efetuada</h5>
                    <button type="button" class="btn-close" @onclick="FecharModal"></button>
                </div>
                <div class="modal-body">
                    <p>A venda foi registrada com sucesso!</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="FecharModal">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ItemVendaViewModel>? itensVenda;
    private decimal Troco { get; set; }
    private decimal ValorRecebido { get; set; }
    private decimal TotalVenda => itensVenda?.Sum(i => i.QuantidadeVenda * i.Valor) ?? 0;
    private int PagamentoId { get; set; }
    private bool MostrarModal { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var itens = await ItemService.ObterTodos();
        itensVenda = itens?.Select(i => new ItemVendaViewModel
            {
                Id = i.Id,
                Descricao = i.Descricao,
                Valor = i.Valor,
                Quantidade = i.Quantidade
            }).ToList();
    }

    private void CalcularTroco()
    {
        Troco = ValorRecebido - TotalVenda;
        if (Troco < 0) Troco = 0;
    }

    private async Task ConfirmarVenda()
    {
        if (itensVenda == null) return;

        foreach (var item in itensVenda.Where(i => i.QuantidadeVenda > 0))
        {
            var command = new BaixarItemCommand
                {
                    ItemId = item.Id,
                    QtdVendida = item.QuantidadeVenda,
                    FormaId = PagamentoId
                };

            await ItemService.DarBaixa(item.Id, item.QuantidadeVenda, PagamentoId);
        }

        MostrarModal = true;
    }

    private async Task FecharModal()
    {
        MostrarModal = false;
        ValorRecebido = 0;
        Troco = 0;
        PagamentoId = 0;

        var itens = await ItemService.ObterTodos();
        itensVenda = itens?.Select(i => new ItemVendaViewModel
            {
                Id = i.Id,
                Descricao = i.Descricao,
                Valor = i.Valor,
                Quantidade = i.Quantidade
            }).ToList();
    }

    public class ItemVendaViewModel
    {
        public int Id { get; set; }
        public string Descricao { get; set; } = string.Empty;
        public int Quantidade { get; set; }
        public decimal Valor { get; set; }
        public int QuantidadeVenda { get; set; } = 0;
    }

    public class BaixarItemCommand
    {
        public int ItemId { get; set; }
        public int QtdVendida { get; set; }
        public int FormaId { get; set; }
    }
}
